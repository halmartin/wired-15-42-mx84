# Makefile.in generated by automake 1.16.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2018 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

######################
#  Build parameters  #
######################
VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
@QAT_COEXISTENCE_AC_FALSE@am__append_1 = drivers/crypto/qat/qat_dh895xcc/qat_dh895xcc.ko\
@QAT_COEXISTENCE_AC_FALSE@			drivers/crypto/qat/qat_dh895xccvf/qat_dh895xccvf.ko

@QAT_COEXISTENCE_AC_FALSE@am__append_2 = qat_895xcc.bin qat_895xcc_mmp.bin
@QAT_COEXISTENCE_AC_FALSE@am__append_3 = dh895xcc_dev0.conf dh895xcc_dev1.conf dh895xccvf_dev0.conf.vm
subdir = .
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
	$(top_srcdir)/m4/ax_compiler_version.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(top_srcdir)/configure \
	$(am__configure_deps) $(am__DIST_COMMON)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \
	$(LISP)config.h.in
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
CSCOPE = cscope
AM_RECURSIVE_TARGETS = cscope
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/config.h.in README \
	compile config.guess config.sub install-sh missing
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  if test -d "$(distdir)"; then \
    find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
      && rm -rf "$(distdir)" \
      || { sleep 5 && rm -rf "$(distdir)"; }; \
  else :; fi
am__post_remove_distdir = $(am__remove_distdir)
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
DIST_TARGETS = dist-gzip
distuninstallcheck_listfiles = find . -type f -print
am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \
  | sed 's|^\./|$(prefix)/|' | grep -v '$(infodir)/dir$$'
distcleancheck_listfiles = find . -type f -print
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
GCC_VER_REQ = @GCC_VER_REQ@
GREP = @GREP@
GXX_VER_REQ = @GXX_VER_REQ@
ICP_BUILDSYSTEM_PATH = @ICP_BUILDSYSTEM_PATH@
ICP_BUILD_OUTPUT = @ICP_BUILD_OUTPUT@
ICP_ENV_DIR = @ICP_ENV_DIR@
ICP_ROOT = @ICP_ROOT@
ICP_TOOLS_TARGET = @ICP_TOOLS_TARGET@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
KERNEL_SOURCE_ROOT = @KERNEL_SOURCE_ROOT@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIB_UDEV_VER_REQ = @LIB_UDEV_VER_REQ@
LIB_UDEV_VER_REQ_STR = @LIB_UDEV_VER_REQ_STR@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MAX_MR = @MAX_MR@
MKDIR_P = @MKDIR_P@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
SED = sed
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build_alias = @build_alias@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host_alias = @host_alias@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
libudev_CFLAGS = @libudev_CFLAGS@
libudev_LIBS = @libudev_LIBS@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
@ICP_DEBUG_AC_TRUE@ICP_DEBUG = 1
@ICP_PARAM_CHECK_AC_TRUE@ICP_PARAM_CHECK = y
@QAT_PKE_MAX_SZ_SIGN_TRUE@QAT_PKE_MAX_SZ_SIGN = y
@QAT_PKE_MAX_SZ_SIGN_FALSE@@QAT_PKE_MAX_SZ_UNSIGN_TRUE@QAT_PKE_MAX_SZ_UNSIGN = y
@DISABLE_STATS_AC_TRUE@DISABLE_STATS = 1
@ICP_LOG_SYSLOG_AC_TRUE@ICP_LOG_SYSLOG = 1
@ICP_NONBLOCKING_PARTIALS_PERFORM_AC_TRUE@ICP_NONBLOCKING_PARTIALS_PERFORM = 1
@ICP_SRIOV_GUEST_AC_TRUE@@ICP_SRIOV_HOST_AC_FALSE@ICP_SRIOV_AM = 2
@ICP_SRIOV_HOST_AC_TRUE@ICP_SRIOV_AM = 1
@ICP_TRACE_AC_TRUE@ICP_TRACE = 1
@ICP_DC_ONLY_AC_TRUE@ICP_DC_ONLY = 1
@ICP_DC_ONLY_AC_TRUE@DO_CRYPTO = 0
@ICP_DC_SYM_ONLY_AC_TRUE@ICP_DC_SYM_ONLY_AM = 1
@ICP_DC_RETURN_COUNTERS_ON_ERROR_AC_TRUE@ICP_DC_RETURN_COUNTERS_ON_ERROR = 1
@ICP_DISABLE_INLINE_AC_TRUE@ICP_DISABLE_INLINE = 1
@KPT_AC_TRUE@KPT = 1
@ICP_HB_FAIL_SIM_AC_TRUE@ICP_HB_FAIL_SIM = y
@QAT_COEXISTENCE_AC_TRUE@QAT_COEXISTENCE = y
@QAT_DISABLE_LKCF_AC_TRUE@QAT_NO_LKCF = y
@QAT_DISABLE_DC_STRICT_AC_FALSE@CNV_STRICT_MODE = 1
@DC_ERROR_SIMULATION_AC_TRUE@ICP_DC_ERROR_SIMULATION = 1
@KAPI_AC_TRUE@ICP_KAPI_AM = 1
@ICP_WITHOUT_THREAD_AC_TRUE@ICP_WITHOUT_THREAD = 1

#Common Env variables
ICP_CORE = ia
ICP_OS = linux_2.6
KERNEL_SOURCE_DIR = $(ICP_ROOT)/quickassist/qat
KERNEL_SOURCE_ROOT_UPDATE = /lib/modules/`uname -r`/updates
SC_EPOLL_DISABLED = 0
LATENCY_CODE = 1
OS = "`\uname -m`"
MV = mv -f
RM = rm -rf
MAKE = make
CP = cp
ECHO = echo
MKDIR = mkdir
SLEEP = sleep
FIND = find
EXEC = exec

#Kernel modules list
KO_MODULES_LIST = drivers/crypto/qat/qat_common/intel_qat.ko \
	drivers/crypto/qat/qat_c62x/qat_c62x.ko \
	drivers/crypto/qat/qat_c62xvf/qat_c62xvf.ko \
	drivers/crypto/qat/qat_d15xx/qat_d15xx.ko \
	drivers/crypto/qat/qat_d15xxvf/qat_d15xxvf.ko \
	drivers/crypto/qat/qat_c3xxx/qat_c3xxx.ko \
	drivers/crypto/qat/qat_c3xxxvf/qat_c3xxxvf.ko $(am__append_1)

#Firmwares list
BIN_LIST = qat_c3xxx.bin qat_c3xxx_mmp.bin qat_c62x.bin \
	qat_c62x_mmp.bin qat_mmp.bin qat_d15xx.bin qat_d15xx_mmp.bin \
	$(am__append_2)
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@CONFIG_LIST = c3xxx_dev0.conf \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	c3xxxvf_dev0.conf.vm \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	c6xx_dev0.conf \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	c6xx_dev1.conf \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	c6xx_dev2.conf \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	c6xxvf_dev0.conf.vm \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	d15xx_dev0.conf \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	d15xxpf_dev0.conf \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	d15xxvf_dev0.conf.vm \
@ICP_DC_ONLY_AC_FALSE@@ICP_DC_SYM_ONLY_AC_FALSE@@KAPI_AC_FALSE@	$(am__append_3)

#Config files list
@ICP_DC_ONLY_AC_TRUE@CONFIG_LIST = c6xx_dev0.conf.dc c6xx_dev1.conf.dc \
@ICP_DC_ONLY_AC_TRUE@	c6xx_dev2.conf.dc c6xxvf_dev0.conf.dc.vm \
@ICP_DC_ONLY_AC_TRUE@	c3xxx_dev0.conf.dc d15xx_dev0.conf.dc \
@ICP_DC_ONLY_AC_TRUE@	d15xxvf_dev0.conf.dc.vm \
@ICP_DC_ONLY_AC_TRUE@	c3xxxvf_dev0.conf.dc.vm $(am__append_3) \
@ICP_DC_ONLY_AC_TRUE@	dh895xcc_dev0.conf.dc \
@ICP_DC_ONLY_AC_TRUE@	dh895xccvf_dev0.conf.dc.vm
@ICP_DC_SYM_ONLY_AC_TRUE@CONFIG_LIST = c6xx_dev0.conf.dc.sym \
@ICP_DC_SYM_ONLY_AC_TRUE@	c6xx_dev1.conf.dc.sym \
@ICP_DC_SYM_ONLY_AC_TRUE@	c6xx_dev2.conf.dc.sym \
@ICP_DC_SYM_ONLY_AC_TRUE@	c6xxvf_dev0.conf.dc.sym.vm \
@ICP_DC_SYM_ONLY_AC_TRUE@	c3xxx_dev0.conf.dc.sym \
@ICP_DC_SYM_ONLY_AC_TRUE@	c3xxxvf_dev0.conf.dc.sym.vm \
@ICP_DC_SYM_ONLY_AC_TRUE@	d15xx_dev0.conf.dc.sym \
@ICP_DC_SYM_ONLY_AC_TRUE@	d15xxvf_dev0.conf.dc.sym.vm \
@ICP_DC_SYM_ONLY_AC_TRUE@	dh895xcc_dev0.conf.dc.sym \
@ICP_DC_SYM_ONLY_AC_TRUE@	dh895xcc_dev1.conf.dc.sym \
@ICP_DC_SYM_ONLY_AC_TRUE@	dh895xccvf_dev0.conf.dc.sym.vm \
@ICP_DC_SYM_ONLY_AC_TRUE@	$(am__append_3)
@KAPI_AC_TRUE@CONFIG_LIST = c6xx_dev0.conf.dc.sym.km \
@KAPI_AC_TRUE@	c6xx_dev1.conf.dc.sym.km \
@KAPI_AC_TRUE@	c6xx_dev2.conf.dc.sym.km \
@KAPI_AC_TRUE@	c6xxvf_dev0.conf.dc.sym.vm.km \
@KAPI_AC_TRUE@	c3xxx_dev0.conf.dc.sym.km \
@KAPI_AC_TRUE@	c3xxxvf_dev0.conf.dc.sym.vm.km \
@KAPI_AC_TRUE@	d15xx_dev0.conf.dc.sym.km \
@KAPI_AC_TRUE@	d15xxvf_dev0.conf.dc.sym.vm.km \
@KAPI_AC_TRUE@	dh895xcc_dev0.conf.dc.sym.km \
@KAPI_AC_TRUE@	dh895xcc_dev1.conf.dc.sym.km \
@KAPI_AC_TRUE@	dh895xccvf_dev0.conf.dc.sym.vm.km \
@KAPI_AC_TRUE@	c6xx_dev0.conf.dc.km c6xx_dev1.conf.dc.km \
@KAPI_AC_TRUE@	c6xx_dev2.conf.dc.km c6xxvf_dev0.conf.dc.vm.km \
@KAPI_AC_TRUE@	c3xxx_dev0.conf.dc.km d15xx_dev0.conf.dc.km \
@KAPI_AC_TRUE@	d15xxvf_dev0.conf.dc.vm.km \
@KAPI_AC_TRUE@	c3xxxvf_dev0.conf.dc.vm.km c3xxx_dev0.conf.km \
@KAPI_AC_TRUE@	c3xxxvf_dev0.conf.vm.km c6xx_dev0.conf.km \
@KAPI_AC_TRUE@	c6xx_dev1.conf.km c6xx_dev2.conf.km \
@KAPI_AC_TRUE@	c6xxvf_dev0.conf.vm.km d15xx_dev0.conf.km \
@KAPI_AC_TRUE@	d15xxvf_dev0.conf.vm.km dh895xcc_dev0.conf.km \
@KAPI_AC_TRUE@	dh895xcc_dev1.conf.km \
@KAPI_AC_TRUE@	dh895xccvf_dev0.conf.dc.vm.km \
@KAPI_AC_TRUE@	dh895xccvf_dev0.conf.vm.km \
@KAPI_AC_TRUE@	dh895xcc_dev0.conf.dc.km $(am__append_3)
QAT_DH895XCC_NUM_VFS = 32
QAT_DHC62X_NUM_VFS = 16
QAT_DHD15XX_NUM_VFS = 16
QAT_DHC3XXX_NUM_VFS = 16

#Device information variables
INTEL_VENDORID = "8086"
DH895_DEVICE_NUMBER = "0435"
DH895_DEVICE_NUMBER_VM = "0443"
C62X_DEVICE_NUMBER = "37c8"
C62X_DEVICE_NUMBER_VM = "37c9"
D15XX_DEVICE_NUMBER = "6f54"
D15XX_DEVICE_NUMBER_VM = "6f55"
C3XXX_DEVICE_NUMBER = "19e2"
C3XXX_DEVICE_NUMBER_VM = "19e3"
numC62xDevice := `lspci -vnd 8086: | egrep -c "37c8|37c9"`
numD15xxDevice := `lspci -vnd 8086: | egrep -c "6f54|6f55"`
numDh895xDevice := `lspci -vnd 8086: | egrep -c "0435|0443"`
numC3xxxDevice := `lspci -vnd 8086: | egrep -c "19e2|19e3"`
numDh895xDevicesP := `lspci -n | egrep -c "$(INTEL_VENDORID):$(DH895_DEVICE_NUMBER)"`
numDh895xDevicesV := `lspci -n | egrep -c "$(INTEL_VENDORID):$(DH895_DEVICE_NUMBER_VM)"`
numC62xDevicesP := `lspci -n | egrep -c "$(INTEL_VENDORID):$(C62X_DEVICE_NUMBER)"`
numC62xDevicesV := `lspci -n | egrep -c "$(INTEL_VENDORID):$(C62X_DEVICE_NUMBER_VM)"`
numD15xxDevicesP := `lspci -n | egrep -c "$(INTEL_VENDORID):$(D15XX_DEVICE_NUMBER)"`
numD15xxDevicesV := `lspci -n | egrep -c "$(INTEL_VENDORID):$(D15XX_DEVICE_NUMBER_VM)"`
numC3xxxDevicesP := `lspci -n | egrep -c "$(INTEL_VENDORID):$(C3XXX_DEVICE_NUMBER)"`
numC3xxxDevicesV := `lspci -n | egrep -c "$(INTEL_VENDORID):$(C3XXX_DEVICE_NUMBER_VM)"`
MODPROBE_BLACKLIST_FILE = "blacklist-qat-vfs.conf"
isLegacyLoaded := `lsmod | egrep -c "icp_qa_al"`

#Targets lists
ALL_TARGETS = qat-driver-all quickassist-all adf-ctl-all qat-service-all
INSTALL_TARGETS = qat-driver-install quickassist-install adf-ctl-install qat-service-install
UNINSTALL_TARGETS = qat-driver-uninstall quickassist-uninstall adf-ctl-uninstall qat-service-uninstall sample-uninstall
CLEAN_TARGETS = qat-driver-clean quickassist-clean adf-ctl-clean qat-service-clean sample-clean

# Naming standards:
#
# Use XXX_DIR for directory paths for something
# Use XXX_BIN for executable binaries
# Use XXX_CONF for configure files names
#
# etc.
QUICKASSIST_DIR = $(ICP_ROOT)/quickassist
QUICKASSIST_QAT_DIR = $(QUICKASSIST_DIR)/qat
ADF_CTL_DIR = $(QUICKASSIST_DIR)/utilities/adf_ctl
ADF_CTL_BIN = adf_ctl

##############################
# QAT driver related targets #
##############################
QAT_DRIVER_DIR = $(QUICKASSIST_DIR)/qat
DETECT_SKU_SH = DetectSKU () {													\
	dhSkubit=`od -tx1 -Ax -j64 -N4 /proc/bus/pci/$$busNum/$$deviceNum.$$functionNum | awk '{print $$4}' | sed '/^$$/d'`;	\
	dhSkubit=`$(ECHO) $$((16\#$$dhSkubit))`;										\
	dhSku=`$(ECHO) $$[$$dhSkubit&0x30]`;											\
																\
	dev=$$(($$2-1));													\
																\
	if [ $$1 == $(C3XXX_DEVICE_NUMBER) -o $$1 == $(C3XXX_DEVICE_NUMBER_VM)							\
		-o $$1 == $(C62X_DEVICE_NUMBER) -o $$1 == $(C62X_DEVICE_NUMBER_VM)						\
		-o $$1 == $(D15XX_DEVICE_NUMBER) -o $$1 == $(D15XX_DEVICE_NUMBER_VM)						\
		-o $$1 == $(DH895_DEVICE_NUMBER) -o $$1 == $(DH895_DEVICE_NUMBER_VM) ]; then					\
		case $$dhSku in													\
		0)														\
			$(ECHO) -e "\tdevice $$dev is SKU1\n";									\
			;;													\
		16)														\
			$(ECHO) -e "\tdevice $$dev is SKU2\n";									\
			;;													\
		32)														\
			$(ECHO) -e "\tdevice $$dev is SKU3\n";									\
			;;													\
		48)														\
			$(ECHO) -e "\tdevice $$dev is SKU4\n";									\
			;;													\
		*)														\
			$(ECHO) -e "\n\t***Error: Invalid SKU detected***>\n";							\
			failed=1												\
			;;													\
		esac														\
	else															\
		$(ECHO) -e "\t*** Invalid Device ***>\n";									\
	fi															\
}

DETECT_SKU = $(DETECT_SKU_SH); DetectSKU

# Detects devices stepping
# BDF format is <busNum>:<deviceNum>:<functionNum>
DETECT_STEPPING_SH = DetectStepping () {											\
	bdf=`lspci -d:$$1 | awk '{print $$1}'| sed -n ''$$2'p'`;								\
	busNum=`$(ECHO) $$bdf | awk -F: '{print $$1}'`;										\
	deviceNum=`$(ECHO) $$bdf | awk -F: '{print $$2}' | awk -F. '{print $$1}'`;						\
	functionNum=`$(ECHO) $$bdf | awk -F: '{print $$2}' | awk -F. '{print $$2}'`;						\
	stepping=`od -tx1 -Ax -j8 -N1 /proc/bus/pci/$$busNum/$$deviceNum.$$functionNum | awk '{print $$2}'| sed "/^$$/d"`;	\
																\
	if [ "yes" == "$$3" ]; then												\
		$(ECHO) -e "\n\tBDF=$$bdf";											\
	fi;															\
																\
	if [ $$1 == $(DH895_DEVICE_NUMBER) -o $$1 == $(DH895_DEVICE_NUMBER_VM) ]; then						\
		case $$stepping in												\
		00)														\
			$(ECHO) -e "\t***DH895x Stepping A0 detected***>"							\
			;;													\
		*)														\
			$(ECHO) -e "\t***Error: Invalid Dh895x Stepping detected***>"						\
			failed=1												\
			;;													\
		esac														\
	fi;															\
	if [ $$1 == $(C62X_DEVICE_NUMBER) -o $$1 == $(C62X_DEVICE_NUMBER_VM) ]; then						\
		case $$stepping in												\
		00)														\
			$(ECHO) -e "\t***C62X Stepping A0 not supported***>"								\
			;;													\
		02)														\
			$(ECHO) -e "\t***C62X Stepping B0 detected***>"								\
			;;													\
		03)														\
			$(ECHO) -e "\t***C62X Stepping B1 detected***>"								\
			;;													\
		04)														\
			$(ECHO) -e "\t***C62X Stepping B2 detected***>"								\
			;;													\
		*)														\
			$(ECHO) -e "\t***Error: Invalid C62X Stepping detected***>"						\
			failed=1												\
			;;													\
		esac														\
	fi;															\
	if [ $$1 == $(D15XX_DEVICE_NUMBER) -o $$1 == $(D15XX_DEVICE_NUMBER_VM) ]; then					\
		case $$stepping in												\
		00)														\
			$(ECHO) -e "\t***D15XX Stepping A0 detected***>"							\
			;;													\
		02)														\
			$(ECHO) -e "\t***D15XX Stepping B0 detected***>"							\
			;;													\
		*)														\
			$(ECHO) -e "\t***Error: Invalid D15XX Stepping detected***>"						\
			failed=1												\
			;;													\
		esac														\
	fi;															\
	if [ $$1 == $(C3XXX_DEVICE_NUMBER) -o $$ == $(C3XXX_DEVICE_NUMBER_VM) ]; then						\
		case $$stepping in												\
		00)														\
			$(ECHO) -e "\t***C3xxx Stepping A0 not supported***>"							\
			;;													\
		10)														\
			$(ECHO) -e "\t***C3xxx Stepping B0 detected***>"							\
			;;													\
		11)														\
			$(ECHO) -e "\t***C3xxx Stepping B1 detected***>"							\
			;;													\
		*)														\
			$(ECHO) -e "\t***Error: Invalid C3xxx Stepping detected***>"						\
			failed=1												\
			;;													\
		esac														\
	fi															\
}

DETECT_STEPPING = $(DETECT_STEPPING_SH); DetectStepping

# print an individual devices info
# parameter 1 is the device number
# parameter 2 is the selected line (1-based)
# set global failed flag on error
PRINT_SINGLE_DEV_INFO_SH = PrintSingleDevInfo()		\
{							\
	$(DETECT_STEPPING) $$1 $$2 yes;			\
	if [ $$failed -eq 0 ]; then			\
		$(DETECT_SKU)  $$1 $$2;			\
	fi						\
}

PRINT_SINGLE_DEV_INFO = $(PRINT_SINGLE_DEV_INFO_SH); PrintSingleDevInfo

# List the device info for one device type
# parameter 1 is the device number
# parameter 2 is the dev count
# listing stops if an error occurs
PRINT_DEVICE_INFO_SH = PrintDevInfo () {		\
	lin=1;						\
	while [ $$lin -le $$2 ]; do			\
		$(PRINT_SINGLE_DEV_INFO) $$1 $$lin;	\
		if [ $$failed -ne 0 ]; then		\
			break;				\
		fi;					\
		((lin++));				\
	done;						\
}

PRINT_DEVICE_INFO = $(PRINT_DEVICE_INFO_SH); PrintDevInfo

# optional parameter 0 - Normal, 1, Virtual Host, 2 - Virtual Guest
PRINT_ACC_DEVICE_INFO_SH = PrintAccDeviceInfo () {						\
	failed=0;										\
												\
	if [ -z "$$1" -o "$$1" != "2" ]; then							\
		if [ $(numDh895xDevice) != "0" ]; then						\
			$(ECHO) -e "Number of Dh895x devices (Physical): $(numDh895xDevicesP)";	\
			$(PRINT_DEVICE_INFO) $(DH895_DEVICE_NUMBER) $(numDh895xDevicesP);	\
		fi;										\
		if [ $(numC62xDevice) != "0" ]; then						\
			$(ECHO) -e "Number of C62x devices (Physical): $(numC62xDevicesP)";	\
			$(PRINT_DEVICE_INFO) $(C62X_DEVICE_NUMBER) $(numC62xDevicesP);		\
		fi;										\
		if [ $(numD15xxDevice) != "0" ]; then						\
			$(ECHO) -e "Number of D15xx devices (Physical): $(numD15xxDevicesP)";	\
			$(PRINT_DEVICE_INFO) $(D15XX_DEVICE_NUMBER) $(numD15xxDevicesP);	\
		fi;										\
		if [ $(numC3xxxDevice) != "0" ]; then						\
			$(ECHO) -e "Number of C3xxx devices (Physical): $(numC3xxxDevicesP)";	\
			$(PRINT_DEVICE_INFO) $(C3XXX_DEVICE_NUMBER) $(numC3xxxDevicesP);	\
		fi;										\
	else											\
		if [ $(numDh895xDevice) != "0" ]; then						\
			$(ECHO) -e "Number of Dh895x devices ( Virtual): $(numDh895xDevicesV)";	\
			$(PRINT_DEVICE_INFO) $(DH895_DEVICE_NUMBER_VM) $(numDh895xDevicesV);	\
		fi;										\
		if [ $(numC62xDevice) != "0" ]; then						\
			$(ECHO) -e "Number of C62x devices ( Virtual): $(numC62xDevicesV)";	\
			$(PRINT_DEVICE_INFO) $(C62X_DEVICE_NUMBER_VM) $(numC62xDevicesV);	\
		fi;										\
		if [ $(numD15xxDevice) != "0" ]; then						\
			$(ECHO) -e "Number of D15xx devices ( Virtual): $(numD15xxDevicesV)";	\
			$(PRINT_DEVICE_INFO) $(D15XX_DEVICE_NUMBER_VM) $(numD15xxDevicesV);	\
		fi;										\
		if [ $(numC3xxxDevice) != "0" ]; then						\
			$(ECHO) -e "Number of C3xxx devices ( Virtual): $(numC3xxxDevicesV)";	\
			$(PRINT_DEVICE_INFO) $(C3XXX_DEVICE_NUMBER_VM) $(numC3xxxDevicesV);	\
		fi;										\
	fi											\
}

PRINT_ACC_DEVICE_INFO = $(PRINT_ACC_DEVICE_INFO_SH); PrintAccDeviceInfo
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
am--refresh: Makefile
	@:
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign'; \
	      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	$(am__cd) $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
$(am__aclocal_m4_deps):

config.h: stamp-h1
	@test -f $@ || rm -f stamp-h1
	@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status config.h
$(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@ $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscope: cscope.files
	test ! -s cscope.files \
	  || $(CSCOPE) -b -q $(AM_CSCOPEFLAGS) $(CSCOPEFLAGS) -i cscope.files $(CSCOPE_ARGS)
clean-cscope:
	-rm -f cscope.files
cscope.files: clean-cscope cscopelist
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
	-rm -f cscope.out cscope.in.out cscope.po.out cscope.files

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	-test -n "$(am__skip_mode_fix)" \
	|| find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r "$(distdir)"
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).tar.gz
	$(am__post_remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2
	$(am__post_remove_distdir)

dist-lzip: distdir
	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz
	$(am__post_remove_distdir)

dist-xz: distdir
	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz
	$(am__post_remove_distdir)

dist-tarZ: distdir
	@echo WARNING: "Support for distribution archives compressed with" \
		       "legacy program 'compress' is deprecated." >&2
	@echo WARNING: "It will be removed altogether in Automake 2.0" >&2
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__post_remove_distdir)

dist-shar: distdir
	@echo WARNING: "Support for shar distribution archives is" \
	               "deprecated." >&2
	@echo WARNING: "It will be removed altogether in Automake 2.0" >&2
	shar $(distdir) | eval GZIP= gzip $(GZIP_ENV) -c >$(distdir).shar.gz
	$(am__post_remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__post_remove_distdir)

dist dist-all:
	$(MAKE) $(AM_MAKEFLAGS) $(DIST_TARGETS) am__post_remove_distdir='@:'
	$(am__post_remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  eval GZIP= gzip $(GZIP_ENV) -dc $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lz*) \
	  lzip -dc $(distdir).tar.lz | $(am__untar) ;;\
	*.tar.xz*) \
	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  eval GZIP= gzip $(GZIP_ENV) -dc $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir)
	chmod u+w $(distdir)
	mkdir $(distdir)/_build $(distdir)/_build/sub $(distdir)/_inst
	chmod a-w $(distdir)
	test -d $(distdir)/_build || exit 0; \
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && am__cwd=`pwd` \
	  && $(am__cd) $(distdir)/_build/sub \
	  && ../../configure \
	    $(AM_DISTCHECK_CONFIGURE_FLAGS) \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	    --srcdir=../.. --prefix="$$dc_install_base" \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
	  && cd "$$am__cwd" \
	  || exit 1
	$(am__post_remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@test -n '$(distuninstallcheck_dir)' || { \
	  echo 'ERROR: trying to run $@ with an empty' \
	       '$$(distuninstallcheck_dir)' >&2; \
	  exit 1; \
	}; \
	$(am__cd) '$(distuninstallcheck_dir)' || { \
	  echo 'ERROR: cannot chdir into $(distuninstallcheck_dir)' >&2; \
	  exit 1; \
	}; \
	test `$(am__distuninstallcheck_listfiles) | wc -l` -eq 0 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile config.h all-local
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-exec-local

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-local

.MAKE: all install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am all-local am--refresh check \
	check-am clean clean-cscope clean-generic clean-local cscope \
	cscopelist-am ctags ctags-am dist dist-all dist-bzip2 \
	dist-gzip dist-lzip dist-shar dist-tarZ dist-xz dist-zip \
	distcheck distclean distclean-generic distclean-hdr \
	distclean-tags distcleancheck distdir distuninstallcheck dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-exec-local install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-generic pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-local

.PRECIOUS: Makefile


########################
# QUICKASSIST Makefile #
########################

quickassist-all:
	@$(MAKE) -C $(QUICKASSIST_DIR)

quickassist-install:

quickassist-uninstall:

quickassist-clean:
	@$(MAKE) clean -C $(QUICKASSIST_DIR)

###################
# QAT Sample Code #
###################

sample-all:
	@if [ -f $(QUICKASSIST_DIR)/utilities/libusdm_drv//linux/build/linux_2.6/user_space/libusdm_drv.a ]; then							\
		$(MAKE) perf_all -C $(ICP_ROOT)/quickassist/lookaside/access_layer/src/sample_code;								\
		$(CP) $(ICP_ROOT)/quickassist/lookaside/access_layer/src/sample_code/performance/build/linux_2.6/user_space/cpa_sample_code $(ICP_BUILD_OUTPUT);\
		$(CP) $(ICP_ROOT)/quickassist/lookaside/access_layer/src/sample_code/performance/build/linux_2.6/kernel_space/cpa_sample_code.ko $(ICP_BUILD_OUTPUT);\
	else																			\
		$(ECHO) "No libusdm_drv library found - build the project (make all) before samples";								\
		false;																		\
	fi

sample-install:
	@if [ ! -d /lib/firmware ]; then	\
		$(MKDIR) /lib/firmware;		\
	fi

	@$(CP) $(ICP_ROOT)/quickassist/lookaside/access_layer/src/sample_code/performance/compression/calgary /lib/firmware
	@$(CP) $(ICP_ROOT)/quickassist/lookaside/access_layer/src/sample_code/performance/compression/calgary32 /lib/firmware
	@$(CP) $(ICP_ROOT)/quickassist/lookaside/access_layer/src/sample_code/performance/compression/canterbury /lib/firmware
	@if [ ! -z '$(mod_sign_cmd)' ]; then \
		if [ -f '$(ICP_BUILD_OUTPUT)/cpa_sample_code.ko' ]; then \
			$(ECHO) "Need to sign sample code $(ICP_BUILD_OUTPUT)/cpa_sample_code.ko."; \
			$(mod_sign_cmd) $(ICP_BUILD_OUTPUT)/cpa_sample_code.ko; \
		fi; \
	fi; \

	@$(INSTALL) -D -m 750 $(ICP_BUILD_OUTPUT)/cpa_sample_code $(bindir)/cpa_sample_code
	@$(INSTALL) -D -m 750 $(ICP_BUILD_OUTPUT)/cpa_sample_code.ko $(bindir)/cpa_sample_code.ko
	@$(ECHO) ""
	@$(ECHO) "*******************************************************"
	@$(ECHO) "* cpa_sample_code installed under $(bindir) directory *"
	@$(ECHO) "*******************************************************"
	@$(ECHO) ""

sample-uninstall:
	@$(RM) /lib/firmware/calgary
	@$(RM) /lib/firmware/calgary32
	@$(RM) /lib/firmware/canterbury

	@$(RM) $(bindir)/cpa_sample_code
	@$(RM) $(bindir)/cpa_sample_code.ko

sample-clean:
	@$(MAKE) clean_performance_code -C $(ICP_ROOT)/quickassist/lookaside/access_layer/src/sample_code
	@$(RM) -r $(ICP_BUILD_OUTPUT)/cpa_sample_code
	@$(RM) -r $(ICP_BUILD_OUTPUT)/cpa_sample_code.ko

###############
# QAT Service #
###############

qat-service-all:
	@$(INSTALL) -D -m 750 $(QUICKASSIST_DIR)/build_system/build_files/qat_service $(ICP_BUILD_OUTPUT)/qat_service
	@$(INSTALL) -D -m 750 $(QUICKASSIST_DIR)/build_system/build_files/qat_service_vfs $(ICP_BUILD_OUTPUT)/qat_service_vfs
	@$(SED) -i "s|/usr/sbin/adf_ctl|$(bindir)/adf_ctl|g" $(ICP_BUILD_OUTPUT)/qat_service;
	@$(SED) -i "s|/usr/sbin/adf_ctl|$(bindir)/adf_ctl|g" $(ICP_BUILD_OUTPUT)/qat_service_vfs
	@$(foreach bin, $(BIN_LIST),											\
		if [ -e $(QUICKASSIST_QAT_DIR)/fw/$(bin) ]; then							\
			$(INSTALL) -D -m 750 $(QUICKASSIST_QAT_DIR)/fw/$(bin) $(ICP_BUILD_OUTPUT)/$(bin);		\
		fi;													\
	)
	@$(foreach ko, $(KO_MODULES_LIST), $(INSTALL) -D -m 750 $(QUICKASSIST_QAT_DIR)/$(ko) $(ICP_BUILD_OUTPUT);)

qat-service-install:
	@if [ $(isLegacyLoaded) == 0 ] || [ "$(QAT_COEXISTENCE)" == "y" ]; then \
		if [ ! -d /lib/firmware/qat_fw_backup ]; then	\
			mkdir /lib/firmware/qat_fw_backup;	\
		fi;	\
		$(foreach bin, $(BIN_LIST),								\
			if [ -e /lib/firmware/$(bin) ]; then						\
				mv /lib/firmware/$(bin) /lib/firmware/qat_fw_backup/$(bin);		\
			fi;										\
			if [ -e $(ICP_BUILD_OUTPUT)/$(bin) ]; then					\
				$(INSTALL) -D -m 750 $(ICP_BUILD_OUTPUT)/$(bin) /lib/firmware/$(bin);	\
			fi;										\
		)	\
		if [ ! -d /etc/qat_conf_backup ]; then							\
			$(MKDIR) /etc/qat_conf_backup;							\
		fi;	\
		if [ $(isLegacyLoaded) == 0 ]; then \
			$(MV) /etc/dh895xcc*.conf /etc/qat_conf_backup/ 2>/dev/null || :;	\
		fi;	\
		$(MV) /etc/c6xx*.conf /etc/qat_conf_backup/ 2>/dev/null || :;	\
		$(MV) /etc/d15xx*.conf /etc/qat_conf_backup/ 2>/dev/null || :;	\
		$(MV) /etc/c3xxx*.conf /etc/qat_conf_backup/ 2>/dev/null || :;	\
		if [ "$(ICP_SRIOV_AM)" != "2" ]; then										\
			for (( dev=0; dev<$(numDh895xDevicesP); dev++ ))							\
			do													\
				$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/dh895xcc_dev0.conf /etc/dh895xcc_dev$$dev.conf;	\
			done;													\
			for (( dev=0; dev<$(numC62xDevicesP); dev++ ))								\
			do													\
				$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/c6xx_dev$$(($$dev%3)).conf /etc/c6xx_dev$$dev.conf;	\
			done;													\
			for (( dev=0; dev<$(numD15xxDevicesP); dev++ ))								\
			do													\
				$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/d15xx_dev$$(($$dev%3)).conf /etc/d15xx_dev$$dev.conf;	\
			done;													\
			for (( dev=0; dev<$(numC3xxxDevicesP); dev++ ))								\
			do													\
				$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/c3xxx_dev0.conf /etc/c3xxx_dev$$dev.conf;		\
			done;													\
		fi;	\
		if [ "$(ICP_SRIOV_AM)" == "1" ]; then												\
			for (( dev=0; dev<$(numDh895xDevicesP); dev++ ))									\
			do															\
				for (( vf_dev = 0; vf_dev<$(QAT_DH895XCC_NUM_VFS); vf_dev++ ))							\
				do														\
					vf_dev_num=$$(($$dev * $(QAT_DH895XCC_NUM_VFS) + $$vf_dev));						\
					$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/dh895xccvf_dev0.conf.vm /etc/dh895xccvf_dev$$vf_dev_num.conf;	\
				done;														\
			done;															\
			for (( dev=0; dev<$(numC62xDevicesP); dev++ ))										\
			do															\
				for (( vf_dev = 0; vf_dev<$(QAT_DHC62X_NUM_VFS); vf_dev++ ))							\
				do														\
					vf_dev_num=$$(($$dev * $(QAT_DHC62X_NUM_VFS) + $$vf_dev)); 						\
					$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/c6xxvf_dev0.conf.vm /etc/c6xxvf_dev$$vf_dev_num.conf;		\
				done;														\
			done;															\
			for (( dev=0; dev<$(numD15xxDevicesP); dev++ ))										\
			do															\
				for (( vf_dev = 0; vf_dev<$(QAT_DHD15XX_NUM_VFS); vf_dev++ ))							\
				do														\
					vf_dev_num=$$(($$dev * $(QAT_DHD15XX_NUM_VFS) + $$vf_dev)); 						\
					$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/d15xxvf_dev0.conf.vm /etc/d15xxvf_dev$$vf_dev_num.conf;	\
				done;														\
			done;															\
			for (( dev=0; dev<$(numC3xxxDevicesP); dev++ ))										\
			do															\
				for (( vf_dev = 0; vf_dev<$(QAT_DHC3XXX_NUM_VFS); vf_dev++ ))							\
				do														\
					vf_dev_num=$$(($$dev * $(QAT_DHC3XXX_NUM_VFS) + $$vf_dev)); 						\
					$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/c3xxxvf_dev0.conf.vm /etc/c3xxxvf_dev$$vf_dev_num.conf;	\
				done;														\
			done;															\
		else																\
			for (( dev=0; dev<$(numDh895xDevicesV); dev++ ))									\
			do															\
				$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/dh895xccvf_dev0.conf.vm /etc/dh895xccvf_dev$$dev.conf;			\
			done;															\
			for (( dev=0; dev<$(numC62xDevicesV); dev++ ))										\
			do															\
				$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/c6xxvf_dev0.conf.vm /etc/c6xxvf_dev$$dev.conf;				\
			done;															\
			for (( dev=0; dev<$(numD15xxDevicesV); dev++ ))										\
			do															\
				$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/d15xxvf_dev0.conf.vm /etc/d15xxvf_dev$$dev.conf;			\
			done;															\
			for (( dev=0; dev<$(numC3xxxDevicesV); dev++ ))										\
			do															\
				$(INSTALL) -D -m 640 $(ICP_BUILD_OUTPUT)/c3xxxvf_dev0.conf.vm /etc/c3xxxvf_dev$$dev.conf;			\
			done;															\
		fi;	\
		$(ECHO) "Creating startup and kill scripts";	\
		if [ $(isLegacyLoaded) == 1 ] && [ "$(QAT_COEXISTENCE)" == "y" ]; then \
			$(INSTALL) -D -m 750 $(ICP_BUILD_OUTPUT)/qat_service /etc/init.d/qat_service_upstream;	\
		else	\
			if [ $(isLegacyLoaded) == 0 ] && [ "$(QAT_COEXISTENCE)" != "y" ]; then \
				$(INSTALL) -D -m 750 $(ICP_BUILD_OUTPUT)/qat_service /etc/init.d/qat_service;   \
			fi;	\
		fi;	\
		if [ "$(ICP_SRIOV_AM)" == "1" ]; then \
			$(INSTALL) -D -m 750 $(ICP_BUILD_OUTPUT)/qat_service_vfs /etc/init.d/qat_service_vfs; \
		fi;	\
		if [ "$(ICP_SRIOV_AM)" == "1" -o "$(ICP_SRIOV_AM)" == 2 ]; then			\
			echo "# Comment or remove next line to disable sriov" > /etc/default/qat;	\
			echo "SRIOV_ENABLE=1" >> /etc/default/qat;					\
		else											\
			echo "# Remove comment on next line to enable sriov" > /etc/default/qat;	\
			echo "#SRIOV_ENABLE=1" >> /etc/default/qat;					\
		fi;	\
		if [ $(isLegacyLoaded) != 0 ]; then	\
			echo "LEGACY_LOADED=1" >> /etc/default/qat;	\
		else	\
			echo "#LEGACY_LOADED=1" >> /etc/default/qat;	\
		fi;	\
		$(RM) /etc/modprobe.d/$(MODPROBE_BLACKLIST_FILE); \
		if [ "$(ICP_SRIOV_AM)" == "1" ]; then \
			if [ $(numDh895xDevicesP) != 0 ];then \
				echo "blacklist qat_dh895xccvf" >> /etc/modprobe.d/$(MODPROBE_BLACKLIST_FILE); \
			fi; \
			if [ $(numC3xxxDevicesP) != 0 ];then \
				echo "blacklist qat_c3xxxvf" >> /etc/modprobe.d/$(MODPROBE_BLACKLIST_FILE); \
			fi; \
			if [ $(numC62xDevicesP) != 0 ];then \
				echo "blacklist qat_c62xvf" >> /etc/modprobe.d/$(MODPROBE_BLACKLIST_FILE); \
			fi; \
			if [ $(numD15xxDevicesP) != 0 ];then \
				echo "blacklist qat_d15xxvf" >> /etc/modprobe.d/$(MODPROBE_BLACKLIST_FILE); \
			fi; \
		fi;	\
		if [ "$(ICP_KAPI_AM)" == 1 ]; then	\
			echo "ENABLE_KAPI=1" >> /etc/default/qat;	\
		else	\
			echo "#ENABLE_KAPI=1" >> /etc/default/qat;	\
		fi;	\
		$(ECHO) "Copying libqat_s.so to $(libdir)";	\
		$(INSTALL) -D -m 755 $(ICP_BUILD_OUTPUT)/libqat_s.so $(libdir)/libqat_s.so;	\
		$(ECHO) "Copying libusdm_drv_s.so to $(libdir)";	\
		$(INSTALL) -D -m 755 $(ICP_BUILD_OUTPUT)/libusdm_drv_s.so $(libdir)/libusdm_drv_s.so;	\
		$(ECHO) $(libdir) > /etc/ld.so.conf.d/qat.conf; ldconfig;   \
		$(ECHO) "Copying usdm module to system drivers";	\
	       	if [ ! -z '$(mod_sign_cmd)' ]; then \
			$(ECHO) "Need to sign driver $(ICP_BUILD_OUTPUT)/usdm_drv.ko."; \
			$(mod_sign_cmd) $(ICP_BUILD_OUTPUT)/usdm_drv.ko; \
			$(ECHO) "Need to sign driver $(ICP_BUILD_OUTPUT)/qat_api.ko."; \
			$(mod_sign_cmd) $(ICP_BUILD_OUTPUT)/qat_api.ko; \
		fi;	\
		$(INSTALL)  $(ICP_BUILD_OUTPUT)/usdm_drv.ko  "/lib/modules/`\uname -r`/kernel/drivers";	\
		$(INSTALL)  $(ICP_BUILD_OUTPUT)/qat_api.ko  "/lib/modules/`\uname -r`/kernel/drivers";	\
		$(ECHO) "Creating udev rules";	\
		if [ ! -e /etc/udev/rules.d/00-qat.rules ]; then							\
			echo 'KERNEL=="qat_adf_ctl" MODE="0660" GROUP="qat"' > /etc/udev/rules.d/00-qat.rules;		\
			echo 'KERNEL=="qat_dev_processes" MODE="0660" GROUP="qat"' >> /etc/udev/rules.d/00-qat.rules;	\
			echo 'KERNEL=="usdm_drv" MODE="0660" GROUP="qat"' >> /etc/udev/rules.d/00-qat.rules;		\
			echo 'KERNEL=="uio*" MODE="0660" GROUP="qat"' >> /etc/udev/rules.d/00-qat.rules;		\
			echo 'KERNEL=="hugepages" MODE="0660" GROUP="qat"' >> /etc/udev/rules.d/00-qat.rules;		\
		fi;	\
		$(ECHO) "Creating module.dep file for QAT released kernel object";	\
		$(ECHO) "This will take a few moments";	\
		depmod -a;	\
		if [ `lsmod | grep "usdm_drv" | wc -l` != "0" ]; then	\
			rmmod usdm_drv;					\
		fi;	\
		if [ -e /sbin/chkconfig ] ; then			\
			if [ $(isLegacyLoaded) == 1 ] && [ "$(QAT_COEXISTENCE)" == "y" ]; then \
				chkconfig --add qat_service_upstream;                    \
			else	\
				chkconfig --add qat_service;			\
			fi;	\
		elif [ -e /usr/sbin/update-rc.d ]; then			\
			if [ $(isLegacyLoaded) == 1 ] && [ "$(QAT_COEXISTENCE)" == "y" ]; then \
				update-rc.d qat_service_upsteram defaults;		\
			else	\
				update-rc.d qat_service defaults;               \
			fi;	\
		fi;	\
		$(ECHO) "Starting QAT service";	\
		if [ $(isLegacyLoaded) == 1 ] && [ "$(QAT_COEXISTENCE)" == "y" ]; then \
			/etc/init.d/qat_service_upstream shutdown;	\
		else	\
			/etc/init.d/qat_service shutdown;       \
		fi;	\
		$(SLEEP) 3;	\
		if [ $(isLegacyLoaded) == 1 ] && [ "$(QAT_COEXISTENCE)" == "y" ]; then \
			/etc/init.d/qat_service_upstream start;	\
		else	\
			/etc/init.d/qat_service start;  \
		fi;	\
		if [ `lsmod |egrep -c "usdm_drv"` == "0" ]; then						\
			$(ECHO) -e "\n\t*** Error:usdm_drv module not installed ***\n";				\
		fi;												\
		if [ "$(ICP_KAPI_AM)" == "1" -a `lsmod |egrep -c "qat_api"` == "0" ]; then		\
			$(ECHO) -e "\n\t*** Error:qat_api module not installed ***\n";				\
		fi;												\
		if [ $(numDh895xDevicesP) != 0 ] && [ $(isLegacyLoaded) == 0 ]; then				\
			if [ `lsmod |egrep -c "qat_dh895xcc"` == "0" ]; then					\
				$(ECHO) -e "\n\t*** Error:qat_dh895xcc module not installed ***\n";		\
			fi;											\
		fi;												\
		if [ $(numC62xDevicesP) != 0 ];then								\
			if [ `lsmod |egrep -c "qat_c62x"` == "0" ]; then					\
				$(ECHO) -e "\n\t*** Error:qat_c62x module not installed ***\n";			\
			fi;											\
		fi;												\
		if [ $(numD15xxDevicesP) != 0 ];then								\
			if [ `lsmod |egrep -c "qat_d15xx"` == "0" ]; then					\
				$(ECHO) -e "\n\t*** Error:qat_d15xx module not installed ***\n";		\
			fi;											\
		fi;												\
		if [ $(numC3xxxDevicesP) != 0 ];then								\
			if [ `lsmod |egrep -c "qat_c3xxx"` == "0" ]; then					\
				$(ECHO) -e "\n\t*** Error:qat_c3xxx module not installed ***\n";		\
			fi;											\
		fi;												\
		if [ "$(ICP_SRIOV_AM)" == "2" ]; then								\
			if [ $(numDh895xDevicesV) != 0 ];then							\
				if [ `lsmod |egrep -c "qat_dh895xccvf"` == "0" ]; then				\
					$(ECHO) -e "\n\t*** Error:qat_dh895xccvf module not installed ***\n";	\
				fi;										\
			fi;											\
			if [ $(numC62xDevicesV) != 0 ];then							\
				if [ `lsmod |egrep -c "qat_c62xvf"` == "0" ]; then				\
					$(ECHO) -e "\n\t*** Error:qat_c62xvf module not installed ***\n";	\
				fi;										\
			fi;											\
			if [ $(numD15xxDevicesV) != 0 ];then							\
				if [ `lsmod |egrep -c "qat_d15xxvf"` == "0" ]; then				\
					$(ECHO) -e "\n\t*** Error:qat_d15xxvf module not installed ***\n";	\
				fi;										\
			fi;											\
			if [ $(numC3xxxDevicesV) != 0 ];then							\
				if [ `lsmod |egrep -c "qat_c3xxxvf"` == "0" ]; then				\
					$(ECHO) -e "\n\t*** Error:qat_c3xxxvf module not installed ***\n";	\
				fi;										\
			fi;											\
		fi;												\
		if [ `$(ICP_BUILD_OUTPUT)/adf_ctl status | grep -c "state: down"` != "0" ]; then		\
			$(ECHO) -e "\n\t*** Error:QAT driver not activated ***\n";				\
		fi;	\
	fi

qat-service-uninstall:
	@if [ $(shell lsmod | grep "qat" | wc -l) != "0" -o -e						\
		$(KERNEL_SOURCE_ROOT_UPDATE)/drivers/crypto/qat/qat_common/intel_qat.ko ]; then		\
		$(ECHO) "Removing the QAT firmware";							\
		$(foreach bin, $(BIN_LIST),								\
			if [ -e /lib/firmware/$(bin) ]; then						\
				$(RM) /lib/firmware/$(bin);						\
			fi;										\
			if [ -e /lib/firmware/qat_fw_backup/$(bin) ]; then				\
				$(MV) /lib/firmware/qat_fw_backup/$(bin) /lib/firmware/$(bin);		\
			fi;										\
		)											\
													\
		if [ -d /lib/firmware/qat_fw ]; then							\
			$(RM) /lib/firmware/qat_fw_backup;						\
		fi;											\
													\
		if [ `lsmod | grep "usdm_drv" | wc -l` != "0" ]; then					\
			rmmod usdm_drv;									\
		fi; 											\
													\
		if [ -e /etc/init.d/qat_service_upstream ]; then                                        \
                        until /etc/init.d/qat_service_upstream shutdown;                                \
                        do                                                                              \
                            sleep 1;                                                                    \
                        done;                                                                           \
                       	if [ -e /sbin/chkconfig ]; then                                                 \
                               	chkconfig --del qat_service_upstream;                                   \
                       	elif [ -e /usr/sbin/update-rc.d ]; then                                         \
                               	update-rc.d -f qat_service_upstream remove;                             \
                       	fi;                                                                             \
                       	$(RM) /etc/init.d/qat_service_upstream;                                         \
                       	$(RM) $(bindir)/adf_ctl;	                                                \
               	elif [ -e /etc/init.d/qat_service ]; then						\
                        until /etc/init.d/qat_service shutdown;                                         \
                        do                                                                              \
                            sleep 1;                                                                    \
                        done;                                                                           \
			if [ -e /sbin/chkconfig ]; then  						\
				chkconfig --del qat_service; 						\
			elif [ -e /usr/sbin/update-rc.d ]; then						\
				update-rc.d -f qat_service remove;					\
			fi;										\
			$(RM) /etc/init.d/qat_service;							\
			$(RM) $(bindir)/adf_ctl;							\
		fi;											\
		$(RM) /etc/init.d/qat_service_vfs;							\
		$(RM) /etc/modprobe.d/$(MODPROBE_BLACKLIST_FILE);					\
													\
		if [ "$(ICP_KAPI_AM)" == "1" -a `lsmod | grep "qat_api" | wc -l` != "0" ]; then		\
			rmmod qat_api;									\
		fi; 											\
		$(RM) $(libdir)/libqat_s.so;								\
		$(RM) $(libdir)/libusdm_drv_s.so;                                                       \
		$(RM) -rf /etc/ld.so.conf.d/qat.conf; ldconfig;                                         \
											                \
		$(ECHO) "Removing config files";							\
		if [ $(isLegacyLoaded) == 0 ]; then 							\
			$(RM) /etc/dh895xcc*.conf;							\
		fi;											\
		$(RM) /etc/c6xx*.conf;									\
		$(RM) /etc/d15xx*.conf;									\
		$(RM) /etc/c3xxx*.conf;									\
		$(RM) /etc/udev/rules.d/00-qat.rules;							\
													\
		mv -f /etc/qat_conf_backup/dh895xcc*.conf /etc/ 2>/dev/null || :;			\
		mv -f /etc/qat_conf_backup/c6xx*.conf /etc/ 2>/dev/null || :;				\
		mv -f /etc/qat_conf_backup/d15xx*.conf /etc/ 2>/dev/null || :;				\
		mv -f /etc/qat_conf_backup/c3xxx*.conf /etc/ 2>/dev/null || :;				\
													\
		$(ECHO) "Removing drivers modules";							\
		$(RM) $(KERNEL_SOURCE_ROOT_UPDATE)/drivers/crypto/qat;					\
                $(RM)   "/lib/modules/`\uname -r`/kernel/drivers"/usdm_drv.ko;		        	\
                $(RM)   "/lib/modules/`\uname -r`/kernel/drivers"/qat_api.ko;		        	\
		$(ECHO) "Creating module.dep file for QAT released kernel object";			\
		depmod -a;										\
													\
		if [ `lsmod |egrep -c "usdm_drv|intel_qat"` != "0" ]; then				\
			if [ `modinfo intel_qat |egrep -c "updates"` == "0" ]; then			\
				$(ECHO) -e "\n\t***  In-tree driver loaded ***\n";			\
				$(ECHO) -e "\n\n\n\n\t***************************************";		\
				$(ECHO) -e "\n\t*** Acceleration Uninstall Complete ***";		\
				$(ECHO) -e "\n\t***************************************\n\n\n\n\n";	\
			else										\
				$(ECHO) -e "\n\t*** Error:Some modules not Removed Properly***\n";	\
				$(ECHO) -e "\n\n\n\n\t***************************************";		\
				$(ECHO) -e "\n\t*** Acceleration Uninstall Failed ***";			\
				$(ECHO) -e "\n\t***************************************\n\n\n\n\n";	\
			fi										\
		else											\
			$(ECHO) -e "\n\n\n\n\t***************************************";			\
			$(ECHO) -e "\n\t*** Acceleration Uninstall Complete ***";			\
			$(ECHO) -e "\n\t***************************************\n\n\n\n\n";		\
		fi;											\
		if [ $(numDh895xDevicesP) != 0 ]; then								\
			lsmod | grep qat_dh895xcc >/dev/null 2>&1 || modprobe -b -q qat_dh895xcc >/dev/null 2>&1 || true;	\
		fi;												\
		if [ $(numC62xDevicesP) != 0 ]; then								\
			lsmod | grep qat_c62x >/dev/null 2>&1 || modprobe -b -q qat_c62x >/dev/null 2>&1 || true;	\
		fi;												\
		if [ $(numD15xxDevicesP) != 0 ]; then                                                           \
			lsmod | grep qat_d15xx >/dev/null 2>&1 || modprobe -b -q qat_d15xx >/dev/null 2>&1 || true;	\
		fi;												\
		if [ $(numC3xxxDevicesP) != 0 ]; then								\
			lsmod | grep qat_c3xxx >/dev/null 2>&1 || modprobe -b -q qat_c3xxx >/dev/null 2>&1 || true;	\
		fi;												\
		if [ $(numDh895xDevicesV) != 0 ]; then								\
			lsmod | grep qat_dh895xccvf >/dev/null 2>&1 || modprobe -b -q qat_dh895xccvf >/dev/null 2>&1 || true;	\
		fi;												\
		if [ $(numC62xDevicesV) != 0 ]; then								\
			lsmod | grep qat_c62xvf >/dev/null 2>&1 || modprobe -b -q qat_c62xvf >/dev/null 2>&1 || true;	\
		fi;												\
		if [ $(numD15xxDevicesV) != 0 ]; then								\
			lsmod | grep qat_d15xxvf >/dev/null 2>&1 || modprobe -b -q qat_d15xxvf >/dev/null 2>&1 || true;	\
		fi;												\
		if [ $(numC3xxxDevicesV) != 0 ]; then								\
			lsmod | grep qat_c3xxxvf >/dev/null 2>&1 || modprobe -b -q qat_c3xxxvf >/dev/null 2>&1 || true;	\
		fi;												\
	else												\
		$(ECHO) -e "\n\n\t*** Acceleration Package Not Installed ***>\n\n\n";			\
	fi

qat-service-clean:
	@$(ECHO) qat-service-clean

###########################
# ADF_CTL related targets #
###########################

adf-ctl-all:
	@$(MAKE) -C $(ADF_CTL_DIR)
	@$(INSTALL) -D -m 750 $(QUICKASSIST_DIR)/utilities/adf_ctl/adf_ctl $(ICP_BUILD_OUTPUT)/adf_ctl
	@$(foreach conf, $(CONFIG_LIST), $(INSTALL) -D -m 750 $(QUICKASSIST_DIR)/utilities/adf_ctl/conf_files/$(conf) $(ICP_BUILD_OUTPUT)/$(conf);)
	@if [ "$(ICP_DC_ONLY)" == 1 ]; then \
		$(FIND) $(ICP_BUILD_OUTPUT) -name '*.conf.dc' -$(EXEC) bash -c ' $(MV) $$0 $${0/.conf.dc/.conf}' {} \;;	\
		if [ "$(ICP_SRIOV_AM)" == "1" -o "$(ICP_SRIOV_AM)" == "2" ]; then     \
			$(FIND) $(ICP_BUILD_OUTPUT) -name '*.dc.vm' -$(EXEC) bash -c ' $(MV) $$0 $${0/.dc.vm/.vm}' {} \;; \
		fi;  \
	fi
	@if [ "$(ICP_DC_SYM_ONLY_AM)" == 1 ]; then \
		$(FIND) $(ICP_BUILD_OUTPUT) -name '*.conf.dc.sym' -$(EXEC) bash -c ' $(MV) $$0 $${0/.conf.dc.sym/.conf}' {} \;;	\
		if [ "$(ICP_SRIOV_AM)" == "1" -o "$(ICP_SRIOV_AM)" == "2" ]; then     \
			$(FIND) $(ICP_BUILD_OUTPUT) -name '*.dc.sym.vm' -$(EXEC) bash -c ' $(MV) $$0 $${0/.dc.sym.vm/.vm}' {} \;; \
		fi;  \
	fi
	@if [ "$(ICP_KAPI_AM)" == 1 ]; then \
		$(FIND) $(ICP_BUILD_OUTPUT) -name '*.conf.km' -$(EXEC) bash -c ' $(MV) $$0 $${0/.conf.km/.conf}' {} \;;	\
		if [ "$(ICP_SRIOV_AM)" == "1" -o "$(ICP_SRIOV_AM)" == "2" ]; then     \
			$(FIND) $(ICP_BUILD_OUTPUT) -name '*.vm.km' -$(EXEC) bash -c ' $(MV) $$0 $${0/.vm.km/.vm}' {} \;; \
		fi;  \
	fi
	@if [ "$(ICP_DC_ONLY)" == 1 -a "$(ICP_KAPI_AM)" == 1 ]; then \
		$(FIND) $(ICP_BUILD_OUTPUT) -name '*.conf.dc.km' -$(EXEC) bash -c ' $(MV) $$0 $${0/.conf.dc.km/.conf}' {} \;;	\
		if [ "$(ICP_SRIOV_AM)" == "1" -o "$(ICP_SRIOV_AM)" == "2" ]; then     \
			$(FIND) $(ICP_BUILD_OUTPUT) -name '*.dc.vm.km' -$(EXEC) bash -c ' $(MV) $$0 $${0/.dc.vm.km/.vm}' {} \;; \
		fi;  \
	fi
	@if [ "$(ICP_DC_SYM_ONLY_AM)" == 1 -a "$(ICP_KAPI_AM)" == 1 ]; then \
		$(FIND) $(ICP_BUILD_OUTPUT) -name '*.conf.dc.sym.km' -$(EXEC) bash -c ' $(MV) $$0 $${0/.conf.dc.sym.km/.conf}' {} \;;	\
		if [ "$(ICP_SRIOV_AM)" == "1" -o "$(ICP_SRIOV_AM)" == "2" ]; then     \
			$(FIND) $(ICP_BUILD_OUTPUT) -name '*.dc.sym.vm.km' -$(EXEC) bash -c ' $(MV) $$0 $${0/.dc.sym.vm.km/.vm}' {} \;; \
		fi;  \
	fi

adf-ctl-install:
	@if [ $(isLegacyLoaded) == 1 ] && [ "$(QAT_COEXISTENCE)" == "y" ]; then	\
		$(INSTALL) -D -m 750 $(ADF_CTL_DIR)/$(ADF_CTL_BIN) $(bindir)/$(ADF_CTL_BIN);	\
	else	\
		if [ $(isLegacyLoaded) == 0 ] && [ "$(QAT_COEXISTENCE)" != "y" ]; then \
			$(INSTALL) -D -m 750 $(ADF_CTL_DIR)/$(ADF_CTL_BIN) $(bindir)/$(ADF_CTL_BIN);	\
		fi;	\
	fi

adf-ctl-uninstall:
#	@$(RM) $(bindir)/$(ADF_CTL_BIN)

adf-ctl-clean:
	@$(MAKE) clean -C $(ADF_CTL_DIR)

qat-driver-all:
	@$(MAKE) KDIR=$(KERNEL_SOURCE_ROOT) -C $(QAT_DRIVER_DIR) modules

qat-driver-install:
	@if [ $(isLegacyLoaded) != 0 ] && [ "$(QAT_COEXISTENCE)" != "y" ]; then	\
		$(ECHO) -e "\n\n\t*** icp_qa_al module for DH895x Installed !!! ***";	\
		$(ECHO) -e "\t*** Try configure --enable-qat-coexistence    ***\n\n";	\
	else	\
		if [ $(isLegacyLoaded) == 0 ] && [ "$(QAT_COEXISTENCE)" == "y" ]; then \
			$(ECHO) -e "\n\n\t*** icp_qa_al module for DH895x  NOT  Installed !!! ***";   \
			$(ECHO) -e "\t*** and --enable-qat-coexistence option is used     ***";   \
	                $(ECHO) -e "\t*** Try configure without --enable-qat-coexistence  ***\n\n";   \
		else	\
			if [ -z '$(mod_sign_cmd)' ]; then \
	               		$(ECHO) "No driver signing required."; \
	               		$(MAKE) KDIR=$(KERNEL_SOURCE_ROOT) -C $(QAT_DRIVER_DIR) mod_sign_cmd=":" modules_install; \
			else	\
	               		$(ECHO) "Driver signing is required.";	\
	               		$(MAKE) KDIR=$(KERNEL_SOURCE_ROOT) -C $(QAT_DRIVER_DIR) mod_sign_cmd="$(mod_sign_cmd)" modules_install; \
      			fi;	\
		fi; \
	fi

qat-driver-uninstall:

qat-driver-clean:
	@$(MAKE) KDIR=$(KERNEL_SOURCE_ROOT) -C $(QAT_DRIVER_DIR) clean

###########
# Targets #
###########

all-local: $(ALL_TARGETS)

clean-local: $(CLEAN_TARGETS)
	@$(RM) $(ICP_BUILD_OUTPUT)

install-exec-local: $(INSTALL_TARGETS)

uninstall-local: $(UNINSTALL_TARGETS)

default-local: all

samples: sample-all

samples-install: sample-all sample-install

device-info:
	@$(ECHO) -e "\n\t****Acceleration Information****>\n\n"
	@$(PRINT_ACC_DEVICE_INFO)

.PHONY: device-info samples samples-install

.NOTPARALLEL: qat-service-all

export

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
