From 6caa44c8dc46e6dc0e2772398caa85a0f4b56354 Mon Sep 17 00:00:00 2001
From: Ethan Everett <eeverett@meraki.com>
Date: Tue, 22 Jan 2019 16:59:19 -0800
Subject: [PATCH 2001/2003] Add rlm_hash module to do password crypting

We want to be able to set the Password-With-Header attribute in the
control list in the post-auth section based on the User-Password in the
request. This adds a function to main/crypt.c which will calculate a
crypt'd password in a thread-safe way, similar to the existing function
which will verify a crypt'd password. It also adds a module called
rlm_hash, which can be configured with a scheme ID (only $5$ for now),
and called in the post-auth section to calculate the crypt'd hash of
User-Password and store it in the control list.
---
 src/include/libradius.h         |   1 +
 src/main/crypt.c                |  45 ++++++++
 src/modules/rlm_hash/all.mk     |   2 +
 src/modules/rlm_hash/rlm_hash.c | 197 ++++++++++++++++++++++++++++++++
 4 files changed, 245 insertions(+)
 create mode 100644 src/modules/rlm_hash/all.mk
 create mode 100644 src/modules/rlm_hash/rlm_hash.c

diff --git a/src/include/libradius.h b/src/include/libradius.h
index c8fa975188..533c84df50 100644
--- a/src/include/libradius.h
+++ b/src/include/libradius.h
@@ -788,6 +788,7 @@ void		fr_rand_seed(void const *, size_t ); /* seed the random pool */
 
 /* crypt wrapper from crypt.c */
 int		fr_crypt_check(char const *key, char const *salt);
+int		fr_do_crypt(char const *password, char const *salt, char *crypted, size_t buflen);
 
 /* cbuff.c */
 
diff --git a/src/main/crypt.c b/src/main/crypt.c
index 99c66d8a80..39eeb4e048 100644
--- a/src/main/crypt.c
+++ b/src/main/crypt.c
@@ -95,3 +95,48 @@ int fr_crypt_check(char const *key, char const *crypted)
 	 */
 	return 1;
 }
+
+/*
+ * calculates a crypt hash in a thread-safe way.
+ *
+ * returns:  0 -- crypt succeeded
+ *	  -1 -- failed to crypt
+ *	  1 -- crypted password exceeds size of buffer
+ */
+int fr_do_crypt(char const *password, char const *salt, char *crypted, size_t buflen)
+{
+	int result = -1;
+#ifdef HAVE_PTHREAD_H
+	/*
+	 *	Ensure we're thread-safe, as crypt() isn't.
+	 */
+	if (fr_crypt_init == false) {
+		pthread_mutex_init(&fr_crypt_mutex, NULL);
+		fr_crypt_init = true;
+	}
+
+	pthread_mutex_lock(&fr_crypt_mutex);
+#endif
+
+	char *crypt_pass = crypt(password, salt);
+
+	if (!crypt_pass) {
+		goto unlock;
+	}
+
+	//uClibc doesn't support crypt_r, so we have to use crypt
+	//and copy the buffer manually
+	size_t cryptlen = strlcpy(crypted, crypt_pass, buflen);
+	if (cryptlen >= buflen) {
+		result = 1;
+	} else {
+		result = 0;
+	}
+
+unlock:
+#ifdef HAVE_PTHREAD_H
+	pthread_mutex_unlock(&fr_crypt_mutex);
+#endif
+
+	return result;
+}
diff --git a/src/modules/rlm_hash/all.mk b/src/modules/rlm_hash/all.mk
new file mode 100644
index 0000000000..b88ce7143f
--- /dev/null
+++ b/src/modules/rlm_hash/all.mk
@@ -0,0 +1,2 @@
+SOURCES		:= rlm_hash.c
+TARGET		:= rlm_hash.a
diff --git a/src/modules/rlm_hash/rlm_hash.c b/src/modules/rlm_hash/rlm_hash.c
new file mode 100644
index 0000000000..f17b80c7dc
--- /dev/null
+++ b/src/modules/rlm_hash/rlm_hash.c
@@ -0,0 +1,197 @@
+/*
+ *   This program is is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or (at
+ *   your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+/**
+ * @file rlm_hash.c
+ */
+RCSID("$Id$")
+
+#include <freeradius-devel/radiusd.h>
+#include <freeradius-devel/modules.h>
+#include <freeradius-devel/rad_assert.h>
+
+#include <openssl/rand.h>
+
+#define SALT_LEN_MAX 16 //Maximum salt length of any supported crypt scheme
+#define CRYPT_SALT_MAX 21 //Prefix: 4 chars; Salt: 16 chars; Terminator ('$'): 1
+#define HASH_LEN_MAX 128 //Must be enough for all terminators, salts, prefixes, round #s, etc.
+// This is enough for sha256, sha512, and bcrypt (uses base64 representation for hash)
+
+typedef struct rlm_hash_t {
+	char const	*crypt_scheme;
+} rlm_hash_t;
+
+/*
+ *	A mapping of configuration file names to internal variables.
+ */
+static const CONF_PARSER module_config[] = {
+	{ "crypt_scheme", FR_CONF_OFFSET(PW_TYPE_STRING | PW_TYPE_REQUIRED, rlm_hash_t, crypt_scheme), "$5$" },
+	CONF_PARSER_TERMINATOR
+};
+
+static int mod_instantiate(CONF_SECTION *conf, void *instance)
+{
+	rlm_hash_t *inst = instance;
+
+	bool good_scheme = true;
+	size_t scheme_len = strlen(inst->crypt_scheme);
+	if (scheme_len != 3) {
+		good_scheme = false;
+	} else if (inst->crypt_scheme[0] != '$' || inst->crypt_scheme[2] != '$') {
+		good_scheme = false;
+	} else if (inst->crypt_scheme[1] != '1' && inst->crypt_scheme[1] != '5') {
+		good_scheme = false;
+	}
+
+	if (!good_scheme) {
+		cf_log_err_cs(conf, "crypt_scheme must be scheme $1$ or $5$");
+		return -1;
+	}
+
+	return 0;
+}
+
+/*
+ *  Check if User-Password matches crypt password in config
+ *  Functions similar to PAP module
+ */
+static bool check_password(REQUEST *request, VALUE_PAIR *vp, const char *pass)
+{
+	char const *header = "{crypt}";
+	char const *p;
+	p = vp->vp_strvalue;
+
+	if (strncmp(p, header, strlen(header)) == 0 &&
+			fr_crypt_check(pass, p + strlen(header)) == 0) {
+		//Password matches
+		return true;
+	}
+	return false;
+}
+
+/*
+ *	Crypt the User-Password and store it in the request list
+ */
+static rlm_rcode_t CC_HINT(nonnull) mod_post_auth(void *instance, REQUEST *request)
+{
+	rlm_hash_t *inst = instance;
+	VALUE_PAIR	*vp;
+
+	static const char base64_charset[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./";
+	char salt[SALT_LEN_MAX] = {0};
+	char crypt_salt[CRYPT_SALT_MAX] = {0};
+	char *crypt_p = crypt_salt;
+	char crypt_pass[HASH_LEN_MAX] = {0};
+	int result;
+
+	/*
+	 *	Can't do hash if there's no password.
+	 */
+	if (!request->password ||
+	    (request->password->da->attr != PW_USER_PASSWORD)) {
+		RDEBUG2("No User-Password attribute in the request.  Cannot do hash");
+		return RLM_MODULE_NOOP;
+	}
+
+	const char *pass = request->password->vp_strvalue;
+	size_t pass_len = request->password->length;
+
+	if (pass[pass_len] != '\0') {
+		RERROR("User-Password is not null terminated?");
+		return RLM_MODULE_FAIL;
+	}
+
+	vp = fr_pair_find_by_num(request->config, PW_POST_AUTH_TYPE, 0, TAG_ANY);
+	if (vp && vp->vp_integer == PW_POST_AUTH_TYPE_REJECT) {
+		RDEBUG2("Post-Auth-Type is REJECT, checking pass with header");
+		vp = fr_pair_find_by_num(request->config, PW_PASSWORD_WITH_HEADER, 0, TAG_ANY);
+		if (vp && check_password(request, vp, pass)) {
+			fr_pair_add(&request->packet->vps, fr_pair_copy(request, vp));
+			RDEBUG2("Password matches crypt pass in config list, copied to request");
+			return RLM_MODULE_UPDATED;
+		}
+		return RLM_MODULE_NOOP;
+	}
+
+	if (!RAND_bytes((unsigned char *)salt, SALT_LEN_MAX)) {
+		RERROR("Failed to get random bytes");
+		return RLM_MODULE_FAIL;
+	}
+
+	size_t scheme_len = strlen(inst->crypt_scheme);
+
+	for (int i=0; i < scheme_len; i++) {
+		*crypt_p = inst->crypt_scheme[i];
+		crypt_p++;
+	}
+	for (int i=0; i < SALT_LEN_MAX; i++) {
+		//Need a random base64 sequence, use the lower 6 bits
+		*crypt_p = base64_charset[salt[i] & 0x3f];
+		crypt_p++;
+	}
+	*crypt_p = '$';
+	crypt_p++;
+	*crypt_p = '\0';
+
+	result = fr_do_crypt(pass, crypt_salt, crypt_pass, sizeof(crypt_pass));
+	if (result == 1) {
+		RERROR("Crypt exceeds size of crypt_pass buffer");
+		return RLM_MODULE_FAIL;
+	} else if (result == -1) {
+		RERROR("Crypt failed");
+		return RLM_MODULE_FAIL;
+	}
+
+	vp = fr_pair_afrom_num(request, PW_PASSWORD_WITH_HEADER, 0);
+	fr_pair_value_sprintf(vp, "{crypt}%s", crypt_pass);
+	fr_pair_add(&request->packet->vps, vp);
+	rdebug_pair(L_DBG_LVL_2, request, vp, NULL);
+
+	return RLM_MODULE_UPDATED;
+}
+
+/*
+ *	Only free memory we allocated.  The strings allocated via
+ *	cf_section_parse() do not need to be freed.
+ */
+static int mod_detach(UNUSED void *instance)
+{
+	/* free things here */
+	return 0;
+}
+
+/*
+ *	The module name should be the only globally exported symbol.
+ *	That is, everything else should be 'static'.
+ *
+ *	If the module needs to temporarily modify it's instantiation
+ *	data, the type should be changed to RLM_TYPE_THREAD_UNSAFE.
+ *	The server will then take care of ensuring that the module
+ *	is single-threaded.
+ */
+extern module_t rlm_hash;
+module_t rlm_hash = {
+	.magic		= RLM_MODULE_INIT,
+	.name		= "hash",
+	.type		= RLM_TYPE_THREAD_SAFE,
+	.inst_size	= sizeof(rlm_hash_t),
+	.config		= module_config,
+	.instantiate	= mod_instantiate,
+	.detach		= mod_detach,
+	.methods = {
+		[MOD_POST_AUTH]		= mod_post_auth
+	},
+};
-- 
2.20.1

